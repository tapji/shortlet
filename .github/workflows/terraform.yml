name: 'Terraform GKE Deployment'

on:
  push:
    branches: ["main"]
  pull_request:

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    - name: Terraform Init
      run: terraform init

    - name: Terraform Format
      run: terraform fmt
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GCP_TF_KEY }}

    - name: Terraform Plan
      run: terraform plan -input=false
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GCP_TF_KEY }}

    - name: Terraform Apply
      run: terraform apply -auto-approve -input=false
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GCP_TF_KEY }}

  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: images
      PROJECT_ID: data-engineering-405316

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        service_account_key: ${{ secrets.GCP_TF_KEY }}
        project_id: ${{ env.GCP_PROJECT_ID }}
        export_default_credentials: true

    - name: Build Docker Image
      run: docker build -t $IMAGE_NAME:latest .

    - name: Automatic Tagging of Releases
      id: increment-git-tag
      run: bash ./scripts/git_update.sh -v major

    - name: Configure Docker Client
      run: |-
        gcloud auth configure-docker --quiet
        gcloud auth configure-docker us-west2-docker.pkg.dev --quiet

    - name: Push Docker Image to Container Registry (GCR)
      env:
        GIT_TAG: ${{ steps.increment-git-tag.outputs.git-tag }}
      run: |
        docker tag $IMAGE_NAME:latest gcr.io/$PROJECT_ID/$IMAGE_NAME:latest
        docker tag $IMAGE_NAME:latest gcr.io/$PROJECT_ID/$IMAGE_NAME:$GIT_TAG
        docker push gcr.io/$PROJECT_ID/$IMAGE_NAME:latest
        docker push gcr.io/$PROJECT_ID/$IMAGE_NAME:$GIT_TAG

    - name: Push Docker Image to Artifact Registry
      env:
        GIT_TAG: ${{ steps.increment-git-tag.outputs.git-tag }}
      run: |
        docker tag $IMAGE_NAME:latest us-west2-docker.pkg.dev/$PROJECT_ID/images/$IMAGE_NAME:latest
        docker tag $IMAGE_NAME:latest us-west2-docker.pkg.dev/$PROJECT_ID/images/$IMAGE_NAME:$GIT_TAG
        docker push us-west2-docker.pkg.dev/$PROJECT_ID/images/$IMAGE_NAME:latest
        docker push us-west2-docker.pkg.dev/$PROJECT_ID/images/$IMAGE_NAME:$GIT_TAG

  deploy:
    name: Deploy to GKE
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      env:
        GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GCP_TF_KEY }}

    - name: Authenticate to Google Cloud
      run: gcloud auth activate-service-account --key-file=${{ secrets.GCP_TF_KEY }}

    - name: Configure gcloud
      run: |
        gcloud config set project ${{ secrets.GCP_PROJECT_ID }}
        gcloud config set compute/zone ${{ secrets.GCP_COMPUTE_ZONE }}

    - name: Set up kubectl
      uses: azure/setup-kubectl@v1
      with:
        version: 'v1.18.0'

    - name: Configure kubectl
      run: gcloud container clusters get-credentials gke-cluster --zone ${{ secrets.GCP_COMPUTE_ZONE }} --project ${{ secrets.GCP_PROJECT_ID }}

    - name: Deploy to GKE
      run: kubectl apply -f deployment.yaml

  verify:
    name: Verify Deployment
    runs-on: ubuntu-latest

    steps:
    - name: Get External IP
      id: get_ip
      run: |
        kubectl get svc app -o=jsonpath='{.status.loadBalancer.ingress[0].ip}'
    
    - name: Test API
      run: |
        echo "External IP: ${{ steps.get_ip.outputs.ip }}"
        curl http://${{ steps.get_ip.outputs.ip }}:5000/time
